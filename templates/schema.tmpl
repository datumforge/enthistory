// Code generated by enthistory, DO NOT EDIT.
package {{ .SchemaPkg }}

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"

	"github.com/datumforge/enthistory"
	"github.com/datumforge/entx"
)

{{- $schema := .Schema }}
{{- $name := $schema.Name }}
{{- $fields := $schema.Fields }}

// {{ $name }} holds the schema definition for the {{ $name }} entity.
type {{ $name }} struct {
	ent.Schema
}

// Annotations of the {{ $name }}.
func ({{ $name }}) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entx.SchemaGenSkip(true),
		entsql.Annotation{
			Table: "{{ .TableName }}",
			{{- if .SchemaName }}
			Schema: "{{ .SchemaName }}",
			{{- end }}
		},
		enthistory.Annotations{
			IsHistory: true,
			Exclude:   true,
		},
		{{- if .Query }}
		entgql.QueryField(),
		entgql.RelayConnection(),
		{{- end}}
		{{- if and (.AuthzPolicy.Enabled) (.AuthzPolicy.ObjectType) }}
		entfga.Annotations{
			ObjectType:   "{{ .AuthzPolicy.ObjectType }}",
			IDField:      "{{ .AuthzPolicy.IDField }}",
			IncludeHooks: false,
		},
		{{- end }}
	}
}

// Fields of the {{ $name }}.
func ({{ $name }}) Fields() []ent.Field {
	historyFields := []ent.Field{
		field.Time("history_time").
			Default(time.Now).
			Immutable(),
		field.{{ .IDType | ToUpperCamel }}("ref").
			Immutable().
			Optional(),
		field.Enum("operation").
			GoType(enthistory.OpType("")).
			Immutable(),
		{{- if $.WithUpdatedBy }}
		field.{{ $.UpdatedByValueType | ToUpperCamel }}("updated_by").
			Optional().
			Immutable().
			Nillable(),
		{{- end }}
	}

	// get the fields from the mixins
	// we only want to include mixin fields, not edges
	// so this prevents FKs back to the main tables
	mixins := {{ .OriginalTableName }}{}.Mixin()
	for _, mixin := range mixins {
		for _, field := range mixin.Fields() {
			historyFields = append(historyFields, field)
		}
	}

	original := {{ .OriginalTableName }}{}
	for _, field := range original.Fields() {
		historyFields = append(historyFields, field)
	}

	return historyFields
}


{{- if $.WithHistoryTimeIndex }}
func ({{ $name }}) Indexes() []ent.Index {
	return []ent.Index{
		index.Fields("history_time"),
	}
}
{{- end }}


{{- if and (.AuthzPolicy.Enabled) ($.AddPolicy) }}
// Policy of the {{ $name }}
func ({{ $name }}) Policy() ent.Policy {
	return privacy.Policy{
		Query: privacy.QueryPolicy{
			privacy.{{ $name }}QueryRuleFunc(func(ctx context.Context, q *generated.{{ $name }}Query) error {
				return q.CheckAccess(ctx)
			}),
			privacy.AlwaysDenyRule(),
		},
	}
}
{{- end }}